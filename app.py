import streamlit as st
import pandas as pd
from datetime import datetime

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Sistema de Generaci√≥n de Horarios Acad√©micos - RUM",
    page_icon="üéì",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Programas acad√©micos del RUM organizados por colegio y nivel acad√©mico
PROGRAMAS_RUM = {
    "COLEGIO DE ADMINISTRACI√ìN DE EMPRESAS": {
        "color": "#FF6B6B",
        "niveles": {
            "Bachilleratos en Administraci√≥n de Empresas": [
                "Contabilidad",
                "Finanzas",
                "Gerencia de Recursos Humanos",
                "Mercadeo",
                "Gerencia de Operaciones",
                "Sistemas Computadorizados de Informaci√≥n",
                "Administraci√≥n de Oficinas"
            ],
            "Maestr√≠as en Administraci√≥n de Empresas": [
                "Administraci√≥n de Empresas (Programa General)",
                "Finanzas",
                "Gerencia Industrial",
                "Recursos Humanos"
            ]
        }
    },
    "COLEGIO DE ARTES Y CIENCIAS": {
        "color": "#4ECDC4",
        "niveles": {
            "Bachilleratos en Artes": [
                "Literatura Comparada",
                "Econom√≠a",
                "Ingl√©s",
                "Historia",
                "Lengua y Literatura Francesa",
                "Estudios Hisp√°nicos",
                "Filosof√≠a",
                "Educaci√≥n F√≠sica ‚Äì Ense√±anza",
                "Educaci√≥n F√≠sica ‚Äì Adiestramiento y Arbitraje",
                "Artes Pl√°sticas",
                "Ciencias Pol√≠ticas",
                "Psicolog√≠a",
                "Ciencias Sociales",
                "Sociolog√≠a",
                "Teor√≠a del Arte"
            ],
            "Bachilleratos en Ciencias": [
                "Biolog√≠a",
                "Microbiolog√≠a Industrial",
                "Pre-M√©dica",
                "Biotecnolog√≠a Industrial",
                "Qu√≠mica",
                "Geolog√≠a",
                "Matem√°ticas",
                "Matem√°ticas ‚Äì Ciencias de la Computaci√≥n",
                "Educaci√≥n Matem√°tica",
                "Enfermer√≠a",
                "F√≠sica",
                "Ciencias F√≠sicas"
            ],
            "Maestr√≠as en Artes": [
                "Estudios Culturales y Human√≠sticos",
                "Estudios Hisp√°nicos",
                "Educaci√≥n en Ingl√©s",
                "Kinesiolog√≠a"
            ],
            "Maestr√≠as en Ciencias": [
                "Biolog√≠a",
                "Qu√≠mica",
                "Geolog√≠a",
                "Ciencias Marinas",
                "F√≠sica",
                "Matem√°ticas Aplicadas",
                "Matem√°tica Estad√≠stica",
                "Matem√°tica Pura",
                "Ense√±anza de las Matem√°ticas a nivel preuniversitario",
                "Computaci√≥n Cient√≠fica",
                "Psicolog√≠a Escolar"
            ],
            "Doctorados en Filosof√≠a": [
                "Ciencias Marinas",
                "Qu√≠mica Aplicada",
                "Psicolog√≠a Escolar"
            ]
        }
    },
    "COLEGIO DE CIENCIAS AGR√çCOLAS": {
        "color": "#96CEB4",
        "niveles": {
            "Bachilleratos en Ciencias Agr√≠colas": [
                "Ciencias Agr√≠colas",
                "Agronom√≠a",
                "Econom√≠a Agr√≠cola",
                "Horticultura",
                "Ciencia Animal",
                "Protecci√≥n de Cultivos",
                "Agronegocios",
                "Educaci√≥n Agr√≠cola",
                "Extensi√≥n Agr√≠cola",
                "Suelos",
                "Sistemas Agr√≠colas y Ambientales",
                "Pre-Veterinaria (No conducente a grado)"
            ],
            "Maestr√≠as en Ciencias": [
                "Agronom√≠a",
                "Ciencias y Tecnolog√≠a de Alimentos",
                "Econom√≠a Agr√≠cola",
                "Educaci√≥n Agr√≠cola",
                "Extensi√≥n Agr√≠cola",
                "Horticultura",
                "Ciencia Animal",
                "Protecci√≥n de Cultivos",
                "Suelos"
            ]
        }
    },
    "COLEGIO DE INGENIER√çA": {
        "color": "#FFEAA7",
        "niveles": {
            "Bachilleratos en Ingenier√≠a": [
                "Ingenier√≠a Qu√≠mica",
                "Ingenier√≠a Civil",
                "Ingenier√≠a de Computadoras",
                "Ciencias e Ingenier√≠a de la Computaci√≥n",
                "Ingenier√≠a El√©ctrica",
                "Ingenier√≠a Industrial",
                "Ingenier√≠a Mec√°nica",
                "Ingenier√≠a de Software",
                "Agrimensura y Topograf√≠a"
            ],
            "Maestr√≠as en Ciencias": [
                "Bioingenier√≠a",
                "Ingenier√≠a Qu√≠mica",
                "Ingenier√≠a Civil",
                "Ingenier√≠a de Computadoras",
                "Ingenier√≠a El√©ctrica",
                "Ingenier√≠a Industrial",
                "Ciencia e Ingenier√≠a de Materiales",
                "Ingenier√≠a Mec√°nica"
            ],
            "Maestr√≠as en Ingenier√≠a": [
                "Bioingenier√≠a",
                "Ingenier√≠a Qu√≠mica",
                "Ingenier√≠a Civil",
                "Ingenier√≠a de Computadoras",
                "Ingenier√≠a El√©ctrica",
                "Ingenier√≠a Industrial",
                "Ciencia e Ingenier√≠a de Materiales",
                "Ingenier√≠a Mec√°nica"
            ],
            "Doctorados en Filosof√≠a": [
                "Bioingenier√≠a",
                "Ingenier√≠a Qu√≠mica",
                "Ingenier√≠a Civil",
                "Ingenier√≠a El√©ctrica",
                "Ingenier√≠a Mec√°nica",
                "Ciencias e Ingenier√≠a de la Informaci√≥n y la Computaci√≥n"
            ]
        }
    }
}

def main():
    # Inicializar session state
    if 'programa_seleccionado' not in st.session_state:
        st.session_state.programa_seleccionado = None
    if 'colegio_seleccionado' not in st.session_state:
        st.session_state.colegio_seleccionado = None
    if 'nivel_seleccionado' not in st.session_state:
        st.session_state.nivel_seleccionado = None
    if 'pagina_actual' not in st.session_state:
        st.session_state.pagina_actual = 'seleccion'

    # Header principal
    st.markdown("""
    <div style="text-align: center; padding: 2rem 0; background: linear-gradient(90deg, #667eea 0%, #764ba2 100%); border-radius: 10px; margin-bottom: 2rem;">
        <h1 style="color: white; margin: 0; font-size: 2.5rem;">üéì Sistema de Generaci√≥n de Horarios RUM</h1>
        <p style="color: white; margin: 0.5rem 0 0 0; font-size: 1.2rem;">Recinto Universitario de Mayag√ºez - Optimizaci√≥n con Algoritmos Gen√©ticos</p>
    </div>
    """, unsafe_allow_html=True)

    # Sidebar con informaci√≥n del programa seleccionado
    with st.sidebar:
        st.markdown("### üìã Estado Actual")
        
        if st.session_state.programa_seleccionado:
            st.success(f"**Programa:** {st.session_state.programa_seleccionado}")
            if st.session_state.nivel_seleccionado:
                st.info(f"**Nivel:** {st.session_state.nivel_seleccionado}")
            if st.session_state.colegio_seleccionado:
                st.info(f"**Colegio:** {st.session_state.colegio_seleccionado}")
        else:
            st.warning("No hay programa seleccionado")
        
        st.markdown("---")
        
        # Bot√≥n para volver a la selecci√≥n
        if st.button("üîÑ Cambiar Programa", use_container_width=True):
            st.session_state.pagina_actual = 'seleccion'
            st.session_state.programa_seleccionado = None
            st.session_state.colegio_seleccionado = None
            st.session_state.nivel_seleccionado = None
            st.rerun()

    # Contenido principal basado en la p√°gina actual
    if st.session_state.pagina_actual == 'seleccion':
        mostrar_seleccion_programa()
    elif st.session_state.pagina_actual == 'generador':
        mostrar_generador_horarios()

def mostrar_seleccion_programa():
    """Muestra la interfaz de selecci√≥n de programa por colegio y nivel acad√©mico"""
    
    st.markdown("## üèõÔ∏è Selecciona tu Programa Acad√©mico")
    st.markdown("Elige tu programa de estudio del Recinto Universitario de Mayag√ºez para generar horarios optimizados.")
    
    # Mostrar colegios
    for colegio, info in PROGRAMAS_RUM.items():
        with st.expander(f"üèõÔ∏è {colegio}", expanded=False):
            total_programas = sum(len(programas) for programas in info['niveles'].values())
            st.markdown(f"**{total_programas} programas disponibles en {len(info['niveles'])} niveles acad√©micos**")
            
            # Mostrar niveles acad√©micos
            for nivel, programas in info['niveles'].items():
                st.markdown(f"### üéì {nivel}")
                st.markdown(f"*{len(programas)} programas*")
                
                # Crear grid de programas para este nivel
                cols = st.columns(3)
                
                for idx, programa in enumerate(programas):
                    with cols[idx % 3]:
                        # Card del programa
                        card_html = f"""
                        <div style="
                            border: 1px solid {info['color']};
                            border-radius: 8px;
                            padding: 0.8rem;
                            margin: 0.3rem 0;
                            background: linear-gradient(135deg, {info['color']}15, {info['color']}08);
                            text-align: center;
                            min-height: 80px;
                            display: flex;
                            align-items: center;
                            justify-content: center;
                        ">
                            <p style="color: #333; margin: 0; font-size: 0.85rem; font-weight: 500; line-height: 1.2;">{programa}</p>
                        </div>
                        """
                        st.markdown(card_html, unsafe_allow_html=True)
                        
                        if st.button(f"Seleccionar", key=f"btn_{colegio}_{nivel}_{programa}", use_container_width=True):
                            st.session_state.programa_seleccionado = programa
                            st.session_state.colegio_seleccionado = colegio
                            st.session_state.nivel_seleccionado = nivel
                            st.rerun()
                
                st.markdown("---")

    # Si se ha seleccionado un programa, mostrar confirmaci√≥n y bot√≥n para continuar
    if st.session_state.programa_seleccionado:
        st.markdown("---")
        
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            st.success(f"‚úÖ **Programa:** {st.session_state.programa_seleccionado}")
            st.info(f"üéì **Nivel:** {st.session_state.nivel_seleccionado}")
            st.info(f"üèõÔ∏è **Colegio:** {st.session_state.colegio_seleccionado}")
            
            if st.button("üöÄ Continuar al Generador de Horarios", type="primary", use_container_width=True):
                st.session_state.pagina_actual = 'generador'
                st.rerun()

def mostrar_generador_horarios():
    """Muestra la interfaz del generador de horarios"""
    
    # Informaci√≥n del programa seleccionado
    colegio_info = None
    for colegio, info in PROGRAMAS_RUM.items():
        if colegio == st.session_state.colegio_seleccionado:
            colegio_info = info
            break
    
    if colegio_info:
        st.markdown(f"""
        <div style="
            background: linear-gradient(90deg, {colegio_info['color']}30, {colegio_info['color']}10);
            padding: 1.5rem;
            border-radius: 10px;
            margin-bottom: 2rem;
            border-left: 5px solid {colegio_info['color']};
        ">
            <h3 style="margin: 0; color: #333;">üìö {st.session_state.programa_seleccionado}</h3>
            <p style="margin: 0.3rem 0; color: #666; font-size: 1rem;">üéì {st.session_state.nivel_seleccionado}</p>
            <p style="margin: 0.3rem 0 0 0; color: #888; font-size: 0.9rem;">üèõÔ∏è {st.session_state.colegio_seleccionado}</p>
        </div>
        """, unsafe_allow_html=True)

    st.markdown("## üìÅ Cargar Datos para Generaci√≥n de Horarios")
    
    # Instrucciones espec√≠ficas por nivel acad√©mico
    with st.expander("üìã Instrucciones para tu programa"):
        st.markdown(f"""
        ### Configuraci√≥n para {st.session_state.programa_seleccionado}
        **Nivel:** {st.session_state.nivel_seleccionado}
        
        **Formato del archivo Excel requerido:**
        - **Hoja:** Debe contener los datos de profesores y cursos
        - **Columnas requeridas:** Profesor, Curso/Materia, Cr√©ditos, Estudiantes
        
        **Consideraciones especiales para {st.session_state.nivel_seleccionado}:**
        """)
        
        if "Bachillerato" in st.session_state.nivel_seleccionado:
            st.markdown("""
            - Cursos b√°sicos y de concentraci√≥n
            - Horarios diurnos principalmente (7:30 AM - 5:00 PM)
            - Clases de 50 minutos o 1 hora 20 minutos
            - Laboratorios de 2-3 horas consecutivas
            """)
        elif "Maestr√≠a" in st.session_state.nivel_seleccionado:
            st.markdown("""
            - Cursos especializados y seminarios
            - Horarios flexibles (incluyendo nocturnos)
            - Clases de 2 horas 30 minutos t√≠picamente
            - Tesis y proyectos de investigaci√≥n
            """)
        elif "Doctorado" in st.session_state.nivel_seleccionado:
            st.markdown("""
            - Seminarios doctorales especializados
            - Horarios muy flexibles
            - Investigaci√≥n dirigida
            - Defensa de disertaci√≥n
            """)
        
        if "INGENIER√çA" in st.session_state.colegio_seleccionado:
            st.markdown("""
            
            **Adicional para Ingenier√≠a:**
            - Laboratorios requieren equipos especializados
            - Talleres y proyectos necesitan espacios amplios
            - Coordinaci√≥n con industria para pr√°cticas
            """)
        elif "CIENCIAS AGR√çCOLAS" in st.session_state.colegio_seleccionado:
            st.markdown("""
            
            **Adicional para Ciencias Agr√≠colas:**
            - Trabajo de campo en horarios variables
            - Laboratorios con organismos vivos
            - Dependencia de condiciones clim√°ticas
            """)

    # Upload del archivo Excel
    uploaded_file = st.file_uploader(
        "üìÅ Cargar archivo Excel con datos de profesores y cursos",
        type=['xlsx', 'xls'],
        help="El archivo debe contener columnas como: Profesor, Curso/Materia, Cr√©ditos, Estudiantes"
    )

    if uploaded_file is not None:
        st.success("‚úÖ Archivo cargado correctamente")
        
        # Configuraci√≥n de par√°metros espec√≠ficos por nivel
        st.markdown("### ‚öôÔ∏è Configuraci√≥n de Par√°metros")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üéØ Par√°metros de Optimizaci√≥n")
            intentos = st.slider("N√∫mero de iteraciones", 50, 500, 200, 50)
            
            # Configuraci√≥n espec√≠fica por nivel
            if "Bachillerato" in st.session_state.nivel_seleccionado:
                creditos_max = st.number_input("Cr√©ditos m√°ximos por profesor", 1, 20, 15)
            elif "Maestr√≠a" in st.session_state.nivel_seleccionado:
                creditos_max = st.number_input("Cr√©ditos m√°ximos por profesor", 1, 15, 12)
            else:  # Doctorado
                creditos_max = st.number_input("Cr√©ditos m√°ximos por profesor", 1, 10, 8)
            
        with col2:
            st.subheader("‚è∞ Restricciones de Horario")
            
            # Horarios por defecto seg√∫n nivel
            if "Bachillerato" in st.session_state.nivel_seleccionado:
                hora_inicio_default = "07:30"
                hora_fin_default = "17:00"
            elif "Maestr√≠a" in st.session_state.nivel_seleccionado:
                hora_inicio_default = "08:00"
                hora_fin_default = "21:00"
            else:  # Doctorado
                hora_inicio_default = "09:00"
                hora_fin_default = "19:00"
            
            hora_inicio = st.time_input("Hora inicio m√≠nima", datetime.strptime(hora_inicio_default, "%H:%M").time())
            hora_fin = st.time_input("Hora fin m√°xima", datetime.strptime(hora_fin_default, "%H:%M").time())
        
        # Bot√≥n para procesar
        if st.button("üéØ Generar Horario Optimizado", type="primary"):
            with st.spinner("Generando horario optimizado..."):
                st.success("üöÄ Iniciando generaci√≥n de horario...")
                
                # Crear datos de ejemplo espec√≠ficos por nivel
                if "Bachillerato" in st.session_state.nivel_seleccionado:
                    ejemplo_horario = {
                        'Curso': ['C√°lculo I', 'F√≠sica I', 'Qu√≠mica General', 'Lab. Qu√≠mica'],
                        'Profesor': ['Dr. Juan P√©rez', 'Dra. Mar√≠a Garc√≠a', 'Dr. Carlos L√≥pez', 'Dr. Carlos L√≥pez'],
                        'D√≠a': ['Lunes', 'Martes', 'Mi√©rcoles', 'Mi√©rcoles'],
                        'Hora Inicio': ['08:00', '10:00', '14:00', '16:00'],
                        'Hora Fin': ['09:20', '11:20', '15:20', '19:00'],
                        'Sal√≥n': ['Aula 101', 'Aula 102', 'Aula 201', 'Lab 301']
                    }
                elif "Maestr√≠a" in st.session_state.nivel_seleccionado:
                    ejemplo_horario = {
                        'Curso': ['Seminario Avanzado', 'M√©todos de Investigaci√≥n', 'Tesis I'],
                        'Profesor': ['Dr. Ana Rodr√≠guez', 'Dr. Luis Mart√≠n', 'Dr. Ana Rodr√≠guez'],
                        'D√≠a': ['Lunes', 'Mi√©rcoles', 'Viernes'],
                        'Hora Inicio': ['18:00', '19:00', '14:00'],
                        'Hora Fin': ['20:30', '21:30', '17:00'],
                        'Sal√≥n': ['Aula Grad 1', 'Aula Grad 2', 'Oficina']
                    }
                else:  # Doctorado
                    ejemplo_horario = {
                        'Curso': ['Seminario Doctoral', 'Investigaci√≥n Dirigida'],
                        'Profesor': ['Dr. Roberto Silva', 'Dr. Roberto Silva'],
                        'D√≠a': ['Martes', 'Jueves'],
                        'Hora Inicio': ['15:00', '10:00'],
                        'Hora Fin': ['18:00', '13:00'],
                        'Sal√≥n': ['Sala Seminarios', 'Laboratorio']
                    }
                
                df_resultado = pd.DataFrame(ejemplo_horario)
                
                st.markdown("### üìä Horario Generado")
                st.dataframe(df_resultado, use_container_width=True)
                
                # Bot√≥n de descarga
                csv = df_resultado.to_csv(index=False)
                filename = f"horario_{st.session_state.programa_seleccionado.replace(' ', '_')}_{st.session_state.nivel_seleccionado.replace(' ', '_')}.csv"
                st.download_button(
                    label="üíæ Descargar horario (CSV)",
                    data=csv,
                    file_name=filename,
                    mime="text/csv"
                )
    
    else:
        # Mostrar ejemplo de formato
        st.markdown("### üìä Ejemplo de formato esperado:")
        
        ejemplo_data = {
            'Profesor': ['Dr. Juan P√©rez', 'Dr. Juan P√©rez', 'Dra. Mar√≠a Garc√≠a', 'Dra. Mar√≠a Garc√≠a'],
            'Curso': ['C√°lculo I', '√Ålgebra Lineal', 'F√≠sica I', 'Laboratorio de F√≠sica'],
            'Cr√©ditos': [4, 3, 4, 2],
            'Estudiantes': [35, 28, 30, 15]
        }
        
        df_ejemplo = pd.DataFrame(ejemplo_data)
        st.dataframe(df_ejemplo, use_container_width=True)

if __name__ == "__main__":
    main()

